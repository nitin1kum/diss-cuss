generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String    @default("anonyms")
  email         String    @unique
  image         String    @default("/default_user.png")
  threads       Thread[]
  password      String?
  emailVerified Boolean?  @default(false)
  role          Role      @default(USER)
  likes         Like[]
  accounts      Account[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Discussion {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  type    String   @default("movie")
  poster  String   @default("/default_discussion.png")
  imdb_id String   @unique
  threads Thread[]
}

model Thread {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  discussion    Discussion @relation(fields: [discussion_id], references: [id])
  discussion_id String     @db.ObjectId
  user          User       @relation(fields: [user_id], references: [id])
  user_id       String     @db.ObjectId
  content       String
  html          String
  likes         Like[]
  isReply       Boolean    @default(false)
  parent        Thread?    @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent_id     String?    @db.ObjectId
  replies       Thread[]   @relation("CommentReplies")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt()
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String  @db.ObjectId
  thread_id String  @db.ObjectId
  liked     Boolean

  user   User   @relation(fields: [user_id], references: [id])
  thread Thread @relation(fields: [thread_id], references: [id])
}

enum Role {
  USER
  ADMIN
}
